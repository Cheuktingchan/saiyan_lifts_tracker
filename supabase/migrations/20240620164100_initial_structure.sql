create table "public"."cycles" (
    "id" bigint generated by default as identity not null,
    "title" text,
    "created_at" timestamp with time zone default now(),
    "user_created" uuid
);


alter table "public"."cycles" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "updated_at" timestamp with time zone,
    "username" text,
    "full_name" text,
    "avatar_url" text,
    "bodyweight" integer,
    "bench" integer,
    "squat" integer,
    "deadlift" integer
);


alter table "public"."profiles" enable row level security;

create table "public"."sets" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "title" text,
    "loads" integer default 0,
    "reps" integer default 0,
    "inserted_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "workout_id" bigint,
    "exercise_id" bigint generated by default as identity not null,
    "set_num" bigint generated by default as identity not null
);


alter table "public"."sets" enable row level security;

create table "public"."user_exercise" (
    "id" bigint generated by default as identity not null,
    "user_created" uuid not null,
    "title" text not null
);


alter table "public"."user_exercise" enable row level security;

create table "public"."workouts" (
    "id" bigint generated by default as identity not null,
    "title" text,
    "created_at" timestamp with time zone default now(),
    "user_created" uuid,
    "cycle_id" bigint
);


alter table "public"."workouts" enable row level security;

CREATE UNIQUE INDEX cycles_id_key ON public.cycles USING btree (id);

CREATE UNIQUE INDEX cycles_pkey ON public.cycles USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles USING btree (username);

CREATE UNIQUE INDEX user_exercise_pkey ON public.user_exercise USING btree (id);

CREATE UNIQUE INDEX workouts_id_key ON public.workouts USING btree (id);

CREATE UNIQUE INDEX workouts_pkey ON public.sets USING btree (id);

CREATE UNIQUE INDEX workouts_pkey1 ON public.workouts USING btree (id);

alter table "public"."cycles" add constraint "cycles_pkey" PRIMARY KEY using index "cycles_pkey";

alter table "public"."profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."sets" add constraint "workouts_pkey" PRIMARY KEY using index "workouts_pkey";

alter table "public"."user_exercise" add constraint "user_exercise_pkey" PRIMARY KEY using index "user_exercise_pkey";

alter table "public"."workouts" add constraint "workouts_pkey1" PRIMARY KEY using index "workouts_pkey1";

alter table "public"."cycles" add constraint "cycles_id_key" UNIQUE using index "cycles_id_key";

alter table "public"."cycles" add constraint "cycles_user_created_fkey" FOREIGN KEY (user_created) REFERENCES auth.users(id) not valid;

alter table "public"."cycles" validate constraint "cycles_user_created_fkey";

alter table "public"."profiles" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) not valid;

alter table "public"."profiles" validate constraint "profiles_id_fkey";

alter table "public"."profiles" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."profiles" add constraint "username_length" CHECK ((char_length(username) >= 3)) not valid;

alter table "public"."profiles" validate constraint "username_length";

alter table "public"."sets" add constraint "exercises_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."sets" validate constraint "exercises_user_id_fkey";

alter table "public"."sets" add constraint "fk_exercises" FOREIGN KEY (workout_id) REFERENCES workouts(id) ON DELETE CASCADE not valid;

alter table "public"."sets" validate constraint "fk_exercises";

alter table "public"."workouts" add constraint "fk_workouts" FOREIGN KEY (cycle_id) REFERENCES cycles(id) ON DELETE CASCADE not valid;

alter table "public"."workouts" validate constraint "fk_workouts";

alter table "public"."workouts" add constraint "workouts_id_key" UNIQUE using index "workouts_id_key";

alter table "public"."workouts" add constraint "workouts_user_created_fkey" FOREIGN KEY (user_created) REFERENCES auth.users(id) not valid;

alter table "public"."workouts" validate constraint "workouts_user_created_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$function$
;

grant delete on table "public"."cycles" to "anon";

grant insert on table "public"."cycles" to "anon";

grant references on table "public"."cycles" to "anon";

grant select on table "public"."cycles" to "anon";

grant trigger on table "public"."cycles" to "anon";

grant truncate on table "public"."cycles" to "anon";

grant update on table "public"."cycles" to "anon";

grant delete on table "public"."cycles" to "authenticated";

grant insert on table "public"."cycles" to "authenticated";

grant references on table "public"."cycles" to "authenticated";

grant select on table "public"."cycles" to "authenticated";

grant trigger on table "public"."cycles" to "authenticated";

grant truncate on table "public"."cycles" to "authenticated";

grant update on table "public"."cycles" to "authenticated";

grant delete on table "public"."cycles" to "service_role";

grant insert on table "public"."cycles" to "service_role";

grant references on table "public"."cycles" to "service_role";

grant select on table "public"."cycles" to "service_role";

grant trigger on table "public"."cycles" to "service_role";

grant truncate on table "public"."cycles" to "service_role";

grant update on table "public"."cycles" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."sets" to "anon";

grant insert on table "public"."sets" to "anon";

grant references on table "public"."sets" to "anon";

grant select on table "public"."sets" to "anon";

grant trigger on table "public"."sets" to "anon";

grant truncate on table "public"."sets" to "anon";

grant update on table "public"."sets" to "anon";

grant delete on table "public"."sets" to "authenticated";

grant insert on table "public"."sets" to "authenticated";

grant references on table "public"."sets" to "authenticated";

grant select on table "public"."sets" to "authenticated";

grant trigger on table "public"."sets" to "authenticated";

grant truncate on table "public"."sets" to "authenticated";

grant update on table "public"."sets" to "authenticated";

grant delete on table "public"."sets" to "service_role";

grant insert on table "public"."sets" to "service_role";

grant references on table "public"."sets" to "service_role";

grant select on table "public"."sets" to "service_role";

grant trigger on table "public"."sets" to "service_role";

grant truncate on table "public"."sets" to "service_role";

grant update on table "public"."sets" to "service_role";

grant delete on table "public"."user_exercise" to "anon";

grant insert on table "public"."user_exercise" to "anon";

grant references on table "public"."user_exercise" to "anon";

grant select on table "public"."user_exercise" to "anon";

grant trigger on table "public"."user_exercise" to "anon";

grant truncate on table "public"."user_exercise" to "anon";

grant update on table "public"."user_exercise" to "anon";

grant delete on table "public"."user_exercise" to "authenticated";

grant insert on table "public"."user_exercise" to "authenticated";

grant references on table "public"."user_exercise" to "authenticated";

grant select on table "public"."user_exercise" to "authenticated";

grant trigger on table "public"."user_exercise" to "authenticated";

grant truncate on table "public"."user_exercise" to "authenticated";

grant update on table "public"."user_exercise" to "authenticated";

grant delete on table "public"."user_exercise" to "service_role";

grant insert on table "public"."user_exercise" to "service_role";

grant references on table "public"."user_exercise" to "service_role";

grant select on table "public"."user_exercise" to "service_role";

grant trigger on table "public"."user_exercise" to "service_role";

grant truncate on table "public"."user_exercise" to "service_role";

grant update on table "public"."user_exercise" to "service_role";

grant delete on table "public"."workouts" to "anon";

grant insert on table "public"."workouts" to "anon";

grant references on table "public"."workouts" to "anon";

grant select on table "public"."workouts" to "anon";

grant trigger on table "public"."workouts" to "anon";

grant truncate on table "public"."workouts" to "anon";

grant update on table "public"."workouts" to "anon";

grant delete on table "public"."workouts" to "authenticated";

grant insert on table "public"."workouts" to "authenticated";

grant references on table "public"."workouts" to "authenticated";

grant select on table "public"."workouts" to "authenticated";

grant trigger on table "public"."workouts" to "authenticated";

grant truncate on table "public"."workouts" to "authenticated";

grant update on table "public"."workouts" to "authenticated";

grant delete on table "public"."workouts" to "service_role";

grant insert on table "public"."workouts" to "service_role";

grant references on table "public"."workouts" to "service_role";

grant select on table "public"."workouts" to "service_role";

grant trigger on table "public"."workouts" to "service_role";

grant truncate on table "public"."workouts" to "service_role";

grant update on table "public"."workouts" to "service_role";

create policy "Enable read access for indidual"
on "public"."cycles"
as permissive
for select
to public
using ((auth.uid() = user_created));


create policy "Individuals can create cycles"
on "public"."cycles"
as permissive
for insert
to public
with check ((auth.uid() = user_created));


create policy "Individuals can delete cycles"
on "public"."cycles"
as permissive
for delete
to public
using ((auth.uid() = user_created));


create policy "Public profiles are viewable by everyone."
on "public"."profiles"
as permissive
for select
to public
using (true);


create policy "Users can insert their own profile."
on "public"."profiles"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "Users can update own profile."
on "public"."profiles"
as permissive
for update
to public
using ((auth.uid() = id));


create policy "Individuals can create workouts."
on "public"."sets"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Individuals can delete their own workouts."
on "public"."sets"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "Individuals can update their own workouts."
on "public"."sets"
as permissive
for update
to public
using ((auth.uid() = user_id));


create policy "Workouts are indivudual"
on "public"."sets"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Enable read access for user"
on "public"."user_exercise"
as permissive
for select
to public
using ((auth.uid() = user_created));


create policy "Individuals can create exercises"
on "public"."user_exercise"
as permissive
for insert
to public
with check ((auth.uid() = user_created));


create policy "User can delete cycles"
on "public"."user_exercise"
as permissive
for delete
to public
using ((auth.uid() = user_created));


create policy "Enable read access for all individuals only"
on "public"."workouts"
as permissive
for select
to public
using ((auth.uid() = user_created));


create policy "Individuals can delete own workouts"
on "public"."workouts"
as permissive
for delete
to public
using ((auth.uid() = user_created));


create policy "Users can create workouts"
on "public"."workouts"
as permissive
for insert
to public
with check ((auth.uid() = user_created));



